<?xml version="1.0" encoding="utf-8"?>
<project name="" default="mxmlc" basedir="./">

    <!-- Flex sdk location. (required) -->
    <property name="FLEX_HOME" value="" />
	<!-- Flex Ant Tasks location. (static) -->
    <taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar"  />
	<!-- Flex frameworks libraries direcroty. (static) -->
    <property name="FLEX_FRAMEWORK_LIBS" value="${FLEX_HOME}/frameworks/libs" />

    <!-- Directories -->
    <property name="bin.dir" value="${basedir}/bin-debug" />
    <property name="lib.dir" value="${basedir}/libs" />
    <property name="src.dir" value="${basedir}/src" />

    
	<!-- Flex application properties -->
    <property name="flex.app.name" value=" "  />
    <property name="flex.app.mainclass" value="${src.dir}/${flex.app.name}.mxml"    />

	
	<!-- compc properties -->
	<property name="compc.output" value="" />
    <property name="compc.include-sources" value="${src.dir}" />
	<property name="compc.library-path" value="${lib.dir}" />
    <property name="compc.external-library-path" value="${FLEX_FRAMEWORK_LIBS}" />
    <property name="compc.source-path" value="${src.dir}" />
    
    <!-- if you want to include a custom namespace -->
    <!--
    <property name="compc.namespace" value="" />
    -->
    <property name="compc.manifest" value="${src.dir}/manifest.xml" />

	<!-- mxmlc properties -->
	<property name="mxmlc.compiler.debug"  value="true" />
    <property name="mxmlc.output" value="${flex.app.name}.swf" />
    <property name="mxmlc.target-player" value="10.0.0" />
    
    <!-- flex 4 SDK or higher -->
    <!--
    <property name="mxmlc.compiler.theme" value="${FLEX_HOME}/frameworks/themes/Halo/halo.swc" />
    -->
    <property name="mxmlc.warnings" value="false" />

    <!-- html-wrapper properties -->
    <property name="html-wrapper.title" value="${flex.app.name}" />
    <property name="html-wrapper.file"  value="${flex.app.name}.html" />
    <property name="html-wrapper.width" value="800" />
    <property name="html-wrapper.height" value="600" />
    <property name="html-wrapper.bgcolor" value="#ffffff" />
    <property name="html-wrapper.application" value="${flex.app.name}" />
    <property name="html-wrapper.swf" value="${flex.app.name}" />
    <property name="html-wrapper.version-major" value="10" />
    <property name="html-wrapper.version-minor" value="0" />
    <property name="html-wrapper.version-revision" value="0" />  
    <!-- doesnt work with flex 4 SDK or higher -->
    <!--
    <property name="html-wrapper.template" value="express-installation" />
    -->
    <property name="html-wrapper.history" value="false" />
    <property name="html-wrapper.output" value="${bin.dir}" />

    <!-- asdocs properties -->
    <property name="asdoc.binary" value="${FLEX_HOME}/bin/asdoc" />
	<property name="asdoc.external-library-path" value="${lib.dir}" />
	<property name="asdoc.doc-sources" value="${src.dir}" />
	<property name="asdoc.output" value="${basedir}/docs" />
	<property name="asdoc.main-title" value="" />
	<property name="asdoc.window-title" value="${asdoc.main-title}" />
    <property name="asdoc.footer" value="${asdoc.main-title}" />

    <!-- flashplayer app -->
    <property name="flashplayer" value="/Applications/Flash\ Player.app" />
    <property name="web-browser" value="/Applications/Google Chrome.app/Contents/MacOS/Google\ Chrome" />

    <!-- air application properties -->
    <property name="air.app.name" value=" "  />
    <property name="air.app.mainclass" value="${src.dir}/${air.app.name}.mxml"    />

    <!-- air properties -->
    <property name="air.app.descriptor" value="${air.app.name}-app.xml" />
    <property name="air.app.binary" value="${air.app.name}.air" />

    <property name="air.app.storetype" value="pkcs12"/>
    <property name="air.app.keystore" value="certificate.p12" />

	<property name="air.certificate.name" value="certificate" />
	<property name="air.certificate.password" value="password" />
    <property name="air.certificate.file" value="${basedir}/${air.certificate.name}.pfx" />
    <property name="air.SIGNING_OPTIONS" value="-storetype '${air.app.storetype}' -keystore '${air.certificate.file}' -storepass '${air.certificate.password}'" />
    
    <!-- adl binary -->
    <condition property="adl.binary" value="${FLEX_HOME}/bin/adl">
        <os family="unix" />
    </condition>
    <condition property="adl.binary" value="${FLEX_HOME}/bin/adl">
         <os family="mac" />
    </condition>
    <condition property="adl.binary" value="${FLEX_HOME}/bin/adl.exe">
        <os family="windows" />
    </condition>
    
    <!-- adt binary -->
	<condition property="adt.binary" value="${FLEX_HOME}/bin/adt">
        <os family="unix" />
    </condition>
    <condition property="adt.binary" value="${FLEX_HOME}/bin/adt">
        <os family="mac" />
    </condition>
    <condition property="adt.binary" value="${FLEX_HOME}/bin/adt.bat">
        <os family="windows" />
    </condition>

    <property name="adt.jar" value="${FLEX_HOME}/lib/adt.jar"    />
    <property name="mxmlc.jar" value="${FLEX_HOME}/lib/mxmlc.jar" />   
    <property name="amxmlc.jar" value="${FLEX_HOME}/lib/amxmlc.jar" />



	<!-- targets -->
	<!-- compc -->
	<target name="compc" description="Compiles the source to a .swc library">
		<!--
		converts class names to be able to reference them in the compc task
		-->
		<fileset id="compc.sources" dir="${compc.include-sources}">
			<include name="**/*.as"/>
		</fileset>
		<pathconvert property="compc.classes" pathsep=" " refid="compc.sources">
			<chainedmapper>
				<globmapper from="${src.dir}/*" to="*"/>
				<mapper type="package" from="*.as" to="*"/>
			</chainedmapper>
		</pathconvert>
		
		<echo message="include classes \r\n ${compc.classes} \r\n" />
		
		<compc output="${lib.dir}/${compc.output}.swc"
			   include-classes="${compc.classes}">

			<load-config filename="${FLEX_HOME}/frameworks/flex-config.xml" />

			<compiler.library-path dir="${FLEX_FRAMEWORK_LIBS}" append="true">
                <include name="**/*.swc" />
            </compiler.library-path>
            <compiler.library-path dir="${lib.dir}" append="true">
                <include name="**/*.swc" />
            </compiler.library-path>

			<!--
			<include-sources dir="${compc.include-sources}"
					includes="*"
					excludes="*.css,*.xml,*.mxml" />
			-->
			<!--
            <include-file name="manifest.xml"
					path="${basedir}/src/manifest.xml" />
			-->
           
			<!-- 
			for custom namespaces use either :
			namespace or include-namespaces
            
            <namespace uri="NAMESPACE_URI"
					manifest="${compc.manifest}" />


            <include-namespaces>
                <namespace>
                    <uri>NAMESPACE_URI</uri>
                    <manifest>${compc.manifest}</manifest>
                 </namespace>
			</include-namespaces>
			-->
			<source-path path-element="${compc.source-path}" />
		</compc>
	</target>

    <!-- mxmlc -->
    <target name="mxmlc" description="Compiles the source to a swf file">
		<mxmlc file="${flex.app.mainclass}" debug="${mxmlc.compiler.debug}"
				output="${bin.dir}/${mxmlc.output}"
				warnings="${mxmlc.warnings}"
				>
			<load-config filename="${FLEX_HOME}/frameworks/flex-config.xml" />
			<!-- external .swc libraries -->
            <compiler.library-path dir="${FLEX_FRAMEWORK_LIBS}" append="true">
                <include name="**/*.swc" />
            </compiler.library-path>
            <compiler.library-path dir="${lib.dir}" append="true">
                <include name="**/*.swc" />
            </compiler.library-path>

			<!--
			flex4 sdk only
			<compiler.theme file="${mxmlc.compiler.theme}" />
			-->

			<source-path path-element="${FLEX_HOME}/frameworks" />
			<source-path path-element="${src.dir}" />
            <target-player>10.0.0</target-player>
		</mxmlc>
	</target>

    <!-- HTML Wrapper -->
    <target name="html-wrapper" depends="mxmlc" description="Creates the HTML template for our Flex application">
        <html-wrapper
            title="${html-wrapper.title}"
            file="${html-wrapper.file}"
            height="${html-wrapper.height}"
            width="${html-wrapper.width}"
            bgcolor="${html-wrapper.bgcolor}"
            application="${html-wrapper.application}"
            swf="${html-wrapper.swf}"
            version-major="${html-wrapper.version-major}"
            version-minor="${html-wrapper.version-minor}"
            version-revision="${html-wrapper.version-revision}"
            history="${html-wrapper.history}"
            template="express-installation"
            output="${html-wrapper.output}" />
    </target>

    <!-- asdoc -->
    <target name="asdoc" description="Runs the asdoc compiler on the source">
         <exec executable="${asdoc.binary}" failonerror="true">

            <arg line="-load-config='${FLEX_HOME}/frameworks/flex-config.xml'"  />
	        <arg line="-external-library-path='${asdoc.external-library-path}'"  />
	        <arg line="-compiler.include-libraries+='${FLEX_HOME}/frameworks/libs/flex.swc'" />
	        <arg line="-compiler.include-libraries+='${FLEX_HOME}/frameworks/libs/framework.swc'" />
	        <arg line="-compiler.include-libraries+='${FLEX_HOME}/frameworks/libs/player/10/playerglobal.swc'" />
	        <arg line="-compiler.include-libraries+='${FLEX_HOME}/frameworks/libs'" />
	        <arg line="-compiler.external-library-path+='${FLEX_HOME}/frameworks/libs/flex.swc'" />
	        <arg line="-compiler.external-library-path+='${FLEX_HOME}/frameworks/libs/framework.swc'" />
	        <arg line="-compiler.external-library-path+='${FLEX_HOME}/frameworks/libs/player/10/playerglobal.swc'" />
			<arg line="-compiler.library-path+='${asdoc.doc-sources}'" />
			<arg line="-doc-sources ${asdoc.doc-sources}" />

            <!-- things I dont want in the docs	-->        
            <!-- 
            <arg line="-exclude-sources ${src.dir}/" />
            --> 
            
            <arg line="-output ${asdoc.output}" />
            <arg line="-main-title '${asdoc.main-title}'" />
			<arg line="-window-title '${asdoc.window-title}'" />
         	<arg line="-footer '${asdoc.footer}'" />
        </exec>
    </target>

    <target name="amxmlc" description="Compiles the Flex source to a runnable AIR swf">
        <java jar="${mxmlc.jar}" fork="true" failonerror="true">
            <arg value="-debug=${mxmlc.compiler.debug}" />
            <arg value="+flexlib=${FLEX_HOME}/frameworks" />
 
            <arg value="+configname=air" />
            <arg line="-compiler.include-libraries+='${FLEX_HOME}/frameworks/libs/air/aircore.swc'" />
            <arg line="-compiler.include-libraries+='${FLEX_HOME}/frameworks/libs/air/airglobal.swc'" />
            <arg line="-compiler.include-libraries+='${FLEX_HOME}/frameworks/libs/flex.swc'" />
	        <arg line="-compiler.include-libraries+='${FLEX_HOME}/frameworks/libs/framework.swc'" />
	        <arg line="-compiler.include-libraries+='${FLEX_HOME}/frameworks/libs/player/10.1/playerglobal.swc'" />

            <arg value="-file-specs=${air.app.mainclass}" />
            <arg value="-output=${bin.dir}/${air.app.name}.swf" />

            <jvmarg value="-Xmx1024m"/>
        </java>

		<!-- copy app descriptor -->
		<copy file="${src.dir}/${air.app.descriptor}"
			tofile="${bin.dir}/${air.app.descriptor}" />
    </target>

    <target name="adt-certificate" description="Creates the AIR application certificate" >
        <exec executable="${adt.binary}" failonerror="true">
            <arg line="-certificate -cn ${air.certificate.name} 1024-RSA '${air.certificate.file}' '${air.certificate.password}'" />
        </exec>    
        <echo>Certificate created ${air.certificate.file}</echo>
    </target>
    
    <target name="adt-package" description="Packages the AIR application">
        <exec executable="${adt.binary}" failonerror="true">
            <arg line="-package ${air.SIGNING_OPTIONS} '${air.app.binary}' '${bin.dir}/${air.app.descriptor}' -e '${bin.dir}/${air.app.name}.swf' '${air.app.name}.swf' " />
        </exec>    
        <echo> Signing AIR setup using certificate ${air.certificate.file}</echo>
    </target>

	<!-- fashplayer -->
	<target name="flashplayer" depends="mxmlc"
			description="Runs the compiled swf in the Flash Player">
		<exec executable="${flashplayer}" spawn="true">
			<arg line="${basedir}/${bin.dir}/${mxmlc.output}.swf" />
		</exec>
    </target>

	<!-- web-browser -->
	<target name="web-browser" depends="mxmlc"
			description="Runs the compiled swf in the Web browser">
		<exec executable="${web-browser}" spawn="true">
			<arg line="'${bin.dir}/${html-wrapper.file}'" />
		</exec>
    </target>

</project>

